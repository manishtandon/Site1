Description
The assemblies System.Fabric and Microsoft.ApplicationServer.ApplicationModel are now decorated with the following attributes in order to ready them for partially trusted users code

[assembly: AllowPartiallyTrustedCallers]
[assembly: SecurityRules(SecurityRuleSet.Level2)]

We use the .NET 4 security rules that revolve around the concept of security transparency. Please see the documentation for detail. A good introduction is given here [1].

In order for an APTCA assembly it to be verifiable it must follow the transparency rules. The changes in the two assemblies are 

- Applying the SecurityCritical and SecuritySafeCritical attribute in adherence with the rules
- Restructuring code so that these attributes can be applied at reasonable boundaries

The following principles were used to decide wether types and members should be transparent, critical, or safe critical

Transparent
- Keep types and members transparent if possible

SecurityCritical
- All interop types
- All types and members that expose interop types directly or indirectly

SecuritySafeCritical
- Minimize the number of safe critical types and members
- When calling interop types or members, make sure that user input cannot manipulate things like IntPtr.
Validate input and do not expose underlying implementation.
- When calling other critical members ensure that there are no side effects (e.g. getting process id for current process is ok, killing another process is not)
- When in doubt mark the member as safe critical instead.

The tool secannotate was used to verify that the assemblies follow the transparency rules.

[1] http://msdn.microsoft.com/en-us/magazine/ee336023.aspx

Related Work Items
•	Work Item 221625: Partial trust


all fully trusted assemblies in v4 are, by default, SecurityCritical
all partially trusted assemblies are automatically SecurityTransparent in v4.

SecurityCritical code can’t be called from SecurityTransparent code.

GuideLine
===================
1. SecurityTransparent Code that does not perform any security-sensitive operations should be SecurityTransparent.
2. Code is considered transparent in the absence of other attributes.
3. One advantage of transparent code is that it’s safe (because dangerous operations are disallowed) and, 
as a result, it does not need as thorough a security review as SecurityCritical 
or, especially, SecuritySafeCritical code. It’s recommended that as much code as possible be SecurityTransparent.




